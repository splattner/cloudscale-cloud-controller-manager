# NOTE: this release was tested against kubernetes v1.9.x

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cloudscale-cloud-controller-manager
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 2
  template:
    metadata:
      labels:
        app: cloudscale-cloud-controller-manager
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccount: cloud-controller-manager
      dnsPolicy: Default
      tolerations:
      # this taint is set by all kubelets running `--cloud-provider=external`
      # so we should tolerate it to schedule the cloud controller manager
      - key: "node.cloudprovider.kubernetes.io/uninitialized"
        value: "true"
        effect: "NoSchedule"
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      # cloud controller manages should be able to run on masters
      - key: "node-role.kubernetes.io/master"
        effect: NoSchedule
      containers:
      - image: splattner/cloudscale-cloud-controller-manager:v0.0.1
        name: cloudscale-cloud-controller-manager
        command:
        - "/bin/cloudscale-cloud-controller-manager"
        - "--cloud-provider=cloudscale"
        - "--leader-elect=false"
        - "--allow-untagged-cloud"
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CLOUDSCALE_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudscale
              key: access-token
